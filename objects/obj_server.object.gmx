<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_server_evil</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

image_speed = 0.1;

shutdown_time = scr_seconds(15);
startup_time = scr_seconds(30);
recover_time = scr_seconds(5);
is_hacked = false;

state = STATE_INACTIVE;

bar_time = 0;
bar_quarter = 0;

level = 0;
has_crashed = false;

num_spawns = 0;

goodness = 0;

boss = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///activate

switch(state) {
case STATE_INACTIVE:
    var near_plr = instance_nearest(x, y, obj_player);
    if near_plr != noone &amp;&amp; point_distance(x, y, near_plr.x, near_plr.y) &lt; 16 {
        state = STATE_SHUTDOWN;
        sprite_index = spr_server_shutdown;
        audio_play_sound(snd_server_shutdown, 0, false);
    }
    break;
    
case STATE_OFF:
    var near_plr = instance_nearest(x, y, obj_player);
    if near_plr != noone &amp;&amp; point_distance(x, y, near_plr.x, near_plr.y) &lt; 16 {
        state = STATE_STARTUP;
        sprite_index = spr_server_startup;
        audio_play_sound(snd_server_startup, 0, false);
    }
    break;
    
case STATE_SHUTDOWN:
    bar_quarter = floor(bar_time / shutdown_time * 4);
    if is_hacked {
        bar_time = max(bar_time - 1, bar_quarter / 4 * shutdown_time);
        break;
    }
    bar_time += 2;

    if bar_time &gt;= shutdown_time {
        bar_time = 0;
        state = STATE_OFF;
        sprite_index = spr_server;
        bar_quarter = 0;
    }
    break;
    
case STATE_STARTUP:
    bar_quarter = floor(bar_time / startup_time * 4);
    if is_hacked {
        bar_time = max(bar_time - 1, bar_quarter / 4 * startup_time);
        break;
    }
    bar_time += 2;
    
    if bar_time &gt;= startup_time {
        bar_quarter = 0;
        bar_time = 0;
        if level = 3 &amp;&amp; !has_crashed {
            audio_play_sound(snd_server_crash, 0, false);
            has_crashed = true;
            state = STATE_CRASHED;
            sprite_index = spr_server_crash;
        } else {
            audio_play_sound(snd_server_recover, 0, false);
            state = STATE_RECOVER;
            sprite_index = spr_server_virus;
            scr_tween(array("goodness", 1), recover_time, scr_void);
        }
    }
    break;
    
case STATE_RECOVER:
    bar_time += 2;
    with obj_parent_enemy {
        if irandom(10) == 0 {
            scr_hit_enemy(id);
        }
    }
    
    if bar_time &gt;= recover_time {
        bar_time = 0;
        state = STATE_DONE;
    }
    break;
    
case STATE_DONE:
    if room == rm_lvl_3 {
        scr_level_change(rm_opening);
    }

    with instance_nearest(x, y, obj_player) {
        if (x &lt; 5 || x &gt; room_width - 5)
            || (y &lt; 5 || y &gt; room_height - 5)
        {
            scr_level_change(rm_opening);
        }
    }
    
    with obj_parent_enemy {
        scr_hit_enemy(id);
    }
    break;
    
case STATE_CRASHED:
    var near_plr = instance_nearest(x, y, obj_player);
    if near_plr != noone &amp;&amp; point_distance(x, y, near_plr.x, near_plr.y) &lt; 16 {
        audio_play_sound(snd_server_shutdown, 0, false);
        state = STATE_SHUTDOWN;
        sprite_index = spr_server_shutdown;
    }
    break;
    
default:
    break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get hacked

var hacker_near = false;
with obj_hacker {
    if point_distance(x, y, other.x, other.y) &lt; 64 {
        hacker_near = true;
        if !other.is_hacked {
            audio_play_sound(snd_server_hack, 0, false);
        }
        break;
    }
}
if boss != noone &amp;&amp; boss.state == STATE_DEATH_RING {
    hacker_near = true;
}
is_hacked = hacker_near;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn enemies level1

if level = 1 {
    if state = STATE_SHUTDOWN {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 0 {
            repeat 10 {
                scr_server_spawn(obj_robot);
            }
            repeat 2 {
                scr_server_spawn(obj_hacker);
            }
            var chestbot = scr_server_spawn(obj_chestbot);
            chestbot.on_chest_open = scr_unlock_shield;
            chestbot.death_text = "shield upgrade";
            
            num_spawns = 1;
        }
    }
    
    if state = STATE_STARTUP {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 1 {
            repeat 30 {
                scr_server_spawn(obj_robot);
            }
            repeat 4 {
                scr_server_spawn(obj_hacker);
            }
            num_spawns = 2;
        }
        
        if bar_quarter &gt;= 1 &amp;&amp; num_spawns == 2 {
            repeat 5 {
                scr_server_spawn(obj_firebot);
            }
            repeat 10 {
                scr_server_spawn(obj_robot);
            }
            repeat 10 {
                scr_server_spawn(obj_hacker);
            }
            num_spawns = 3;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 3 {
            repeat 20 {
                scr_server_spawn(obj_firebot);
            }
            repeat 20 {
                scr_server_spawn(obj_robot);
            }
            num_spawns = 4;
        }
        
        if bar_quarter &gt;= 3 &amp;&amp; num_spawns == 4 {
            repeat 10 {
                scr_server_spawn(obj_firebot);
            }
            repeat 50 {
                scr_server_spawn(obj_robot);
            }
            num_spawns = 5;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn enemies level2

if level = 2 {
    if state = STATE_SHUTDOWN {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 0 {
            repeat 30 {
                scr_server_spawn(obj_robot);
            }
            repeat 10 {
                scr_server_spawn(obj_firebot);
            }
            repeat 2 {
                scr_server_spawn(obj_hacker);
            }
            scr_server_spawn(obj_fatbot);
            
            num_spawns = 1;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 1 {
            repeat 30 {
                scr_server_spawn(obj_robot);
            }
            
            num_spawns = 2;
        }
    }
    
    if state = STATE_STARTUP {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 2 {
            repeat 20 {
                scr_server_spawn(obj_robot);
            }
            repeat 2 {
                scr_server_spawn(obj_fatbot);
            }
            
            var chestbot = scr_server_spawn(obj_chestbot);
            chestbot.on_chest_open = scr_unlock_three_hammer;
            chestbot.death_text = "hammer upgrade";
            
            num_spawns = 3;
        }
        
        if bar_quarter &gt;= 1 &amp;&amp; num_spawns == 3 {
            repeat 50 {
                scr_server_spawn(obj_firebot);
            }
            repeat 4 {
                scr_server_spawn(obj_fatbot);
            }
            repeat 10 {
                scr_server_spawn(obj_hacker);
            }
            
            num_spawns = 4;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 4 {
            repeat 30 {
                scr_server_spawn(obj_robot);
            }
            
            num_spawns = 5;
        }
        
        if bar_quarter &gt;= 3 &amp;&amp; num_spawns == 5 {
            repeat 50 {
                scr_server_spawn(obj_firebot);
            }
            repeat 10 {
                scr_server_spawn(obj_fatbot);
            }
            
            num_spawns = 6;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn enemies level3

if level = 3 {
    if state == STATE_SHUTDOWN {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 0 {
            if !instance_exists(obj_endboss) {
                boss = instance_create(x, y - 300, obj_endboss);
            }
            boss.state = STATE_RAINING;

            repeat 15 {
                scr_server_spawn(obj_robot);
            }
            repeat 15 {
                scr_server_spawn(obj_firebot);
            }
            var chestbot = scr_server_spawn(obj_chestbot);
            chestbot.on_chest_open = scr_unlock_huge_mace;
            chestbot.death_text = "mace upgrade";
            
            num_spawns = 1;
        }
        
        if bar_quarter &gt;= 1 &amp;&amp; num_spawns == 1 {
            repeat 4 {
                scr_server_spawn(obj_hacker);
            }
            num_spawns = 2;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 2 {
            repeat 8 {
                scr_server_spawn(obj_robot);
            }
            repeat 8 {
                scr_server_spawn(obj_firebot);
            }
            num_spawns = 3;
        }
        
        if bar_quarter &gt;= 3 &amp;&amp; num_spawns == 3 {
            repeat 8 {
                scr_server_spawn(obj_robot);
            }
            repeat 8 {
                scr_server_spawn(obj_firebot);
            }
            num_spawns = 4;
        }
    }
    
    if state == STATE_STARTUP &amp;&amp; !has_crashed {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 4 {
            repeat 20 {
                scr_server_spawn(obj_firebot);
            }
            boss.state = STATE_RAINING;
            num_spawns = 5;
        }
        
        if bar_quarter &gt;= 1 &amp;&amp; num_spawns == 5 {
            num_spawns = 6;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 6 {
            boss.state = STATE_RING_OF_FIRE;
            num_spawns = 7;
        }
        
        if bar_quarter &gt;= 3 &amp;&amp; num_spawns == 7 {
            repeat 20 {
                scr_server_spawn(obj_firebot);
            }
            boss.state = STATE_DEATH_RING;
            num_spawns = 0;
        }
    }
    
    if state == STATE_STARTUP &amp;&amp; has_crashed {
        if bar_quarter &gt;= 0 &amp;&amp; num_spawns == 4 {
            repeat 20 {
                scr_server_spawn(obj_firebot);
            }
            boss.state = STATE_RAINING;
            num_spawns = 5;
        }
        
        if bar_quarter &gt;= 1 &amp;&amp; num_spawns == 5 {
            boss.state = STATE_RING_OF_FIRE;
            num_spawns = 6;
        }
        
        if bar_quarter &gt;= 2 &amp;&amp; num_spawns == 6 {
            boss.state = STATE_RAINING;
            num_spawns = 7;
        }
        
        if bar_quarter &gt;= 3 &amp;&amp; num_spawns == 7 {
            repeat 50 {
                scr_server_spawn(obj_firebot);
            }
            repeat 50 {
                scr_server_spawn(obj_robot);
            }
            repeat 10 {
                scr_server_spawn(obj_fatbot);
            }
            boss.state = STATE_DEATH_RING;
            
            num_spawns = 0;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_tween_update</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_within_room_bounds</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_zindex</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw objective

switch(state) {
case STATE_INACTIVE:
    scr_draw_objective("turn off the server");
    break;
    
case STATE_OFF:
    scr_draw_objective("turn on the server");
    break;

case STATE_SHUTDOWN:
    if is_hacked {
        scr_draw_objective_bar("server is under attack", bar_time / shutdown_time, c_red);
    } else {
        scr_draw_objective_bar("turning off server", bar_time / shutdown_time, make_colour_rgb(64, 64, 8));
    }
    break;
    
case STATE_STARTUP:
    
    if is_hacked {
        scr_draw_objective_bar("server is under attack", bar_time / startup_time, c_red);
    } else {
        scr_draw_objective_bar("turning on server", bar_time / startup_time, c_green);
    }
    break;
    
case STATE_RECOVER:
    scr_draw_objective_bar("activating antivirus", bar_time / recover_time, c_blue);
    break;
    
case STATE_DONE:
    scr_draw_objective("server has recovered##leave the room");
    break;
    
case STATE_CRASHED:
    scr_draw_objective("server error:##turn it off and on again", c_red);
    break;
    
default:
    break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw good server

if goodness != 0 {
    draw_sprite_ext(spr_server_good, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, goodness); 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
